%%Script to calculate, normalize and project the power spectra in a pipeline onto the standard brain.
% Matthias Sure
clear
%% Medication state
med_state = 'OFF';
%% select the data based on the Medication state
switch med_state
    case 'OFF'
    %% OFF
    % path to brainstorm database
    database='.../brainstorm_db/PD_pre/';
    %subjects included
    subjects = {'S001','S002','S003','...'};
    % folders with data    
    subject = {...
        'S001' {'data1', ...
        'data2', ...
        'data3'}; ...
        'S002' {'data1', ...
        'data2', ...
        'data3'}; ...
        'S003' {'data1', ...
        'data2', ...
        'data3'}};
    case 'ON'
    %% ON
    % path to brainstorm database
    database='.../brainstorm_db/PD_pre/';
    %subjects included
    subjects = {'S001','S002','S003','...'};
    % folders with data    
    subject = {...
        'S001' {'data1', ...
        'data2', ...
        'data3'}; ...
        'S002' {'data1', ...
        'data2', ...
        'data3'}; ...
        'S003' {'data1', ...
        'data2', ...
        'data3'}};
end

%% Pipeplin
% loop over subects
for iSubj = 1% : size(subjects,2)
    % loop over measurement runs
    for iRun= 1 %: length(subject{iSubj,2})
        % empty cell for for file name
        sFiles = {};
        % get the files
        files = dir(fullfile([database 'data/' subject{iSubj,1} '_PD_pre/'  subject{iSubj,2}{iRun}]));
        % get the beamormer
        for iFile = 1 : size(files,1)
            if contains(files(iFile).name,'PNAI')
                sFiles = {[subject{iSubj,1} '_PD_pre/'  subject{iSubj,2}{iRun} '/' files(iFile).name]};
                break;
            end
        end
        if ~isempty(sFiles)
            % Process: Power spectrum density (Welch)
            sFiles = bst_process('CallProcess', 'process_psd', sFiles, [], ...
                'timewindow',  [108.75, 790.624], ...
                'win_length',  4, ...
                'win_overlap', 50, ...
                'units',       'physical', ...  % Physical: U2/Hz
                'clusters',    {}, ...
                'scoutfunc',   1, ...  % Mean
                'win_std',     0, ...
                'edit',        struct(...
                     'Comment',         'Power', ...
                     'TimeBands',       [], ...
                     'Freqs',           [], ...
                     'ClusterFuncTime', 'none', ...
                     'Measure',         'power', ...
                     'Output',          'all', ...
                     'SaveKernel',      0));
            
                 % Process: Spectrum normalization
            sFiles_norm = bst_process('CallProcess', 'process_tf_norm', sFiles, [], ...
                'normalize', 'multiply2020', ...  % 1/f compensation (multiply power by frequency)
                'overwrite', 1);

%             % Process: Spectrum normalization
%             sFiles_norm = bst_process('CallProcess', 'process_tf_norm', sFiles, [], ...
%                 'normalize', 'relative2020', ...  % Relative power (divide by total power)
%                 'overwrite', 1);

            % Process: Project on default anatomy: surface
            sFiles = bst_process('CallProcess', 'process_project_sources', sFiles_norm, [], ...
                'headmodeltype', 'surface');  % Cortex surface    
            
            %rename file,comment und old files
            temp = load(fullfile([database 'data/' sFiles.FileName]));
            temp.Comment = [subject{iSubj,1} '_PD_pre_' med_state '_run_' mat2str(iRun)];
            save(fullfile([database 'data/Group_analysis/' subject{iSubj,2}{iRun} '/timefreq_psd_relative_' temp.Comment '.mat']), '-struct', 'temp');
            delete(fullfile([database 'data/' sFiles.FileName]))
            % Process: Delete selected files
            sFiles = bst_process('CallProcess', 'process_delete', sFiles_norm, [], ...
                'target', 1);  % Delete selected files
            
        end
    end
end


